name: Deploy para VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Deploy para VPS
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e  # Parar em qualquer erro
          
          DOMAIN="${{ secrets.DOMAIN_NAME }}"
          
          # Validar secrets obrigat√≥rios logo no in√≠cio
          if [ -z "$DOMAIN" ] || [ -z "${{ secrets.JWT_SECRET }}" ] || [ -z "${{ secrets.ADMIN_USERNAME }}" ] || [ -z "${{ secrets.ADMIN_PASSWORD }}" ]; then
            echo "‚ùå ERRO: Secrets obrigat√≥rios n√£o configurados!"
            echo "Necess√°rios: DOMAIN_NAME, JWT_SECRET, ADMIN_USERNAME, ADMIN_PASSWORD"
            exit 1
          fi
          
          echo "üöÄ Iniciando deploy para $DOMAIN..."
          
          # Configurar diret√≥rios
          mkdir -p ~/carangode ~/logs
          cd ~/carangode
          
          # Configurar reposit√≥rio
          if [ ! -d ".git" ]; then
            git init
            git remote add origin ${{ github.server_url }}/${{ github.repository }}.git
          fi
          
          git fetch origin main
          git reset --hard origin/main
          
          # Dar permiss√µes aos scripts
          chmod +x *.sh
          
          # Instalar Node.js 20 LTS (requerido pelo React Router 7)
          if ! node --version | grep -q "v20"; then
            echo "üì¶ Instalando Node.js 20 LTS..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Instalar PM2 e serve
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2@latest
          fi
          if ! command -v serve &> /dev/null; then
            sudo npm install -g serve@latest
          fi
          
          echo "üîß Configurando backend..."
          cd backend
          
          # Criar .env do backend
          cat > .env << EOF
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}"
          ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
          PORT=5000
          NODE_ENV=production
          FRONTEND_URL=https://$DOMAIN
          EOF
          
          # Instalar depend√™ncias e configurar banco
          npm ci --production --silent
          npx prisma generate
          npx prisma migrate deploy
          
          # Restart backend
          pm2 stop backend 2>/dev/null || true
          pm2 delete backend 2>/dev/null || true
          pm2 start src/server.js --name "backend" --max-memory-restart 150M
          
          echo "‚öõÔ∏è Configurando frontend..."
          cd ../frontend
          
          # Criar .env do frontend
          cat > .env << EOF
          VITE_API_URL=https://$DOMAIN/api
          NODE_ENV=production
          EOF
          
          # Build e start frontend
          npm ci --silent
          npm run build
          
          pm2 stop frontend 2>/dev/null || true
          pm2 delete frontend 2>/dev/null || true
          pm2 start "npx serve -s build/client -l 3000" --name "frontend" --max-memory-restart 100M --cwd ~/carangode/frontend
          
          echo "üåê Configurando Nginx e SSL automaticamente..."
          cd ..
          
          # Usar o script autom√°tico de SSL
          if [ ! -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "üîí Executando configura√ß√£o SSL autom√°tica..."
            if sudo ./setup-ssl.sh "$DOMAIN"; then
              echo "‚úÖ SSL configurado com sucesso!"
            else
              echo "‚ö†Ô∏è SSL falhou, configurando nginx apenas com HTTP..."
              # Fallback: configurar nginx sem SSL
              sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" nginx.conf
              
              # Criar vers√£o HTTP-only do nginx.conf
              sed -e '/listen 443 ssl/d' \
                  -e '/ssl_certificate/d' \
                  -e '/include .*letsencrypt/d' \
                  -e '/ssl_dhparam/d' \
                  -e 's/listen 80;/listen 80 default_server;/' \
                  -e '/return 301 https/d' \
                  nginx.conf > /tmp/nginx-http.conf
              
              sudo cp /tmp/nginx-http.conf /etc/nginx/sites-available/carangode
              sudo ln -sf /etc/nginx/sites-available/carangode /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default
              
              if sudo nginx -t && sudo systemctl restart nginx; then
                echo "‚úÖ Nginx HTTP configurado com sucesso"
              else
                echo "‚ùå Falha cr√≠tica na configura√ß√£o nginx"
                sudo nginx -t || true
                exit 1
              fi
            fi
          else
            echo "‚úÖ SSL j√° configurado, aplicando configura√ß√£o nginx..."
            # Apenas configurar nginx se SSL j√° existe
            sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" nginx.conf
            sudo cp nginx.conf /etc/nginx/sites-available/carangode
            sudo ln -sf /etc/nginx/sites-available/carangode /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx
          fi
          
          # Configurar PM2 para iniciar com sistema
          pm2 save
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.VPS_USERNAME }} --hp /home/${{ secrets.VPS_USERNAME }} 2>/dev/null || true
          
          # Aguardar servi√ßos estabilizarem
          sleep 5
          
          echo ""
          echo "üîç Verifica√ß√µes de sa√∫de..."
          
          # Teste das rotas CORRETAS
          if curl -sf http://localhost:5000/api/cursos > /dev/null; then
            echo "‚úÖ Backend (API) funcionando"
          else
            echo "‚ùå Backend n√£o responde"
            pm2 logs backend --lines 5 --nostream
          fi
          
          if curl -sf http://localhost:3000 > /dev/null; then
            echo "‚úÖ Frontend funcionando"
          else
            echo "‚ùå Frontend n√£o responde"
            pm2 logs frontend --lines 5 --nostream
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx ativo"
          else
            echo "‚ùå Nginx inativo"
            sudo systemctl status nginx --no-pager -l
          fi
          
          # SSL check
          if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "‚úÖ SSL configurado e renova√ß√£o autom√°tica ativada"
            PROTOCOL="https"
          else
            echo "‚ö†Ô∏è Usando HTTP (sem SSL)"
            PROTOCOL="http"
          fi
          
          echo ""
          echo "üéâ Deploy conclu√≠do com sucesso!"
          echo "üåê Site: $PROTOCOL://$DOMAIN"
          echo "üîß API: $PROTOCOL://$DOMAIN/api/cursos"
          echo ""
          echo "üìä Status dos servi√ßos:"
          pm2 status
          echo ""
          echo "üîí Certificados SSL:"
          sudo certbot certificates 2>/dev/null || echo "Certbot n√£o configurado" 