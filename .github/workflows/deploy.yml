name: Deploy para VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Deploy para VPS
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e  # Parar em qualquer erro
          
          DOMAIN="${{ secrets.DOMAIN_NAME }}"
          
          # Validar secrets obrigatórios logo no início
          if [ -z "$DOMAIN" ] || [ -z "${{ secrets.JWT_SECRET }}" ] || [ -z "${{ secrets.ADMIN_USERNAME }}" ] || [ -z "${{ secrets.ADMIN_PASSWORD }}" ]; then
            echo "❌ ERRO: Secrets obrigatórios não configurados!"
            echo "Necessários: DOMAIN_NAME, JWT_SECRET, ADMIN_USERNAME, ADMIN_PASSWORD"
            exit 1
          fi
          
          echo "🚀 Iniciando deploy para $DOMAIN..."
          
          # Configurar diretórios
          mkdir -p ~/carangode ~/logs
          cd ~/carangode
          
          # Configurar repositório
          if [ ! -d ".git" ]; then
            git init
            git remote add origin ${{ github.server_url }}/${{ github.repository }}.git
          fi
          
          git fetch origin main
          git reset --hard origin/main
          
          # Configurar domínio no nginx
          sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" nginx.conf
          
          # Instalar Node.js 22 LTS (melhor performance + compatibilidade com React Router 7)
          if ! node --version | grep -q "v22"; then
            echo "📦 Instalando Node.js 22 LTS..."
            curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Instalar PM2 e serve
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2@latest
          fi
          if ! command -v serve &> /dev/null; then
            sudo npm install -g serve@latest
          fi
          
          # Instalar Nginx ANTES de configurar firewall
          if ! command -v nginx &> /dev/null; then
            echo "🌐 Instalando Nginx..."
            sudo apt update -qq
            sudo apt install -y nginx
          fi
          
          # Configurar firewall DEPOIS do Nginx instalado
          if ! sudo ufw status | grep -q "Status: active"; then
            echo "🔒 Configurando firewall..."
            sudo ufw --force enable
            sudo ufw allow ssh
            sudo ufw allow 'Nginx Full'
          fi
          
          echo "🔧 Configurando backend..."
          cd backend
          
          # Criar .env do backend
          cat > .env << EOF
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}"
          ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
          PORT=5000
          NODE_ENV=production
          FRONTEND_URL=https://$DOMAIN
          EOF
          
          # Instalar dependências e configurar banco
          npm ci --production --silent
          npx prisma generate
          npx prisma migrate deploy
          
          # Restart backend
          pm2 stop backend 2>/dev/null || true
          pm2 delete backend 2>/dev/null || true
          pm2 start src/server.js --name "backend" --max-memory-restart 150M
          
          echo "⚛️ Configurando frontend..."
          cd ../frontend
          
          # Criar .env do frontend
          cat > .env << EOF
          VITE_API_URL=https://$DOMAIN/api
          NODE_ENV=production
          EOF
          
          # Build e start frontend
          npm ci --silent
          npm run build
          
          pm2 stop frontend 2>/dev/null || true
          pm2 delete frontend 2>/dev/null || true
          pm2 start "npx serve -s build/client -l 3000" --name "frontend" --max-memory-restart 100M --cwd ~/carangode/frontend
          
          echo "🌐 Configurando Nginx..."
          cd ..
          
          # Backup e deploy nginx
          [ -f "/etc/nginx/sites-available/carangode" ] && sudo cp /etc/nginx/sites-available/carangode /etc/nginx/sites-available/carangode.bak
          
          sudo cp nginx.conf /etc/nginx/sites-available/carangode
          sudo ln -sf /etc/nginx/sites-available/carangode /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Instalar Certbot e configurar SSL
          if ! command -v certbot &> /dev/null; then
            echo "🔒 Instalando Certbot..."
            sudo apt install -y certbot python3-certbot-nginx
          fi
          
          # Configurar SSL
          if [ ! -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "🔒 Configurando SSL..."
            sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email admin@$DOMAIN --redirect || {
              echo "⚠️ SSL falhou, usando HTTP temporariamente"
              sed -i 's/listen 443 ssl http2;/listen 80;/' /etc/nginx/sites-available/carangode
              sed -i '/ssl_certificate/d' /etc/nginx/sites-available/carangode
              sed -i '/include \/etc\/letsencrypt/d' /etc/nginx/sites-available/carangode
            }
          fi
          
          # Testar e aplicar nginx
          sudo nginx -t && sudo systemctl reload nginx
          sudo systemctl enable nginx
          
          # Configurar PM2 para iniciar com sistema
          pm2 save
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.VPS_USERNAME }} --hp /home/${{ secrets.VPS_USERNAME }} 2>/dev/null || true
          
          # Aguardar serviços estabilizarem
          sleep 3
          
          echo ""
          echo "🔍 Verificações de saúde..."
          
          # Teste das rotas CORRETAS
          if curl -sf http://localhost:5000/api/cursos > /dev/null; then
            echo "✅ Backend (API) funcionando"
          else
            echo "❌ Backend não responde"
            pm2 logs backend --lines 5 --nostream
          fi
          
          if curl -sf http://localhost:3000 > /dev/null; then
            echo "✅ Frontend funcionando"
          else
            echo "❌ Frontend não responde"
            pm2 logs frontend --lines 5 --nostream
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            echo "✅ Nginx ativo"
          else
            echo "❌ Nginx inativo"
            sudo systemctl status nginx --no-pager -l
          fi
          
          # SSL check
          if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "✅ SSL configurado"
            PROTOCOL="https"
          else
            echo "⚠️ Usando HTTP (sem SSL)"
            PROTOCOL="http"
          fi
          
          echo ""
          echo "🎉 Deploy concluído com sucesso!"
          echo "🌐 Site: $PROTOCOL://$DOMAIN"
          echo "🔧 API: $PROTOCOL://$DOMAIN/api/cursos"
          echo ""
          echo "📊 Status dos serviços:"
          pm2 status 