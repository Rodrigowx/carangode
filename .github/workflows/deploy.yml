name: Deploy para VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_ssl_setup:
        description: 'For√ßar reconfigura√ß√£o SSL'
        required: false
        default: false
        type: boolean
      version_tag:
        description: 'Tag de vers√£o (deixe vazio para auto-gerar)'
        required: false
        type: string
      debug_ssh:
        description: 'Debug SSH (apenas para troubleshooting)'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necess√°rio para tags
        
    - name: Verificar secrets obrigat√≥rios
      run: |
        echo "üîç Verificando configura√ß√£o de secrets..."
        
        # Lista de secrets obrigat√≥rios
        MISSING_SECRETS=""
        
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS VPS_HOST"
        fi
        
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS VPS_USERNAME"
        fi
        
        # Verificar se tem pelo menos uma forma de autentica√ß√£o
        if [ -z "${{ secrets.VPS_PASSWORD }}" ] && [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS VPS_PASSWORD_ou_VPS_SSH_KEY"
        fi
        
        if [ -z "${{ secrets.DOMAIN_NAME }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS DOMAIN_NAME"
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS JWT_SECRET"
        fi
        
        if [ -z "${{ secrets.ADMIN_USERNAME }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS ADMIN_USERNAME"
        fi
        
        if [ -z "${{ secrets.ADMIN_PASSWORD }}" ]; then
          MISSING_SECRETS="$MISSING_SECRETS ADMIN_PASSWORD"
        fi
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "‚ùå ERRO: Secrets obrigat√≥rios n√£o configurados:"
          for secret in $MISSING_SECRETS; do
            echo "  - $secret"
          done
          echo ""
          echo "üìù Configure estes secrets em: Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        
        echo "‚úÖ Todos os secrets obrigat√≥rios est√£o configurados"
        
        # Debug info (sem expor valores)
        echo "üîß Informa√ß√µes de configura√ß√£o:"
        echo "  - Host: ${{ secrets.VPS_HOST }}"
        echo "  - Usu√°rio: ${{ secrets.VPS_USERNAME }}"
        echo "  - Autentica√ß√£o: $([ -n "${{ secrets.VPS_SSH_KEY }}" ] && echo "SSH Key" || echo "Password")"
        echo "  - Dom√≠nio: ${{ secrets.DOMAIN_NAME }}"
        
    - name: Configurar vari√°veis de ambiente
      id: vars
      run: |
        # Gerar vers√£o baseada na data e commit
        if [ -n "${{ github.event.inputs.version_tag }}" ]; then
          VERSION="${{ github.event.inputs.version_tag }}"
        else
          VERSION="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        
        # Configurar ambiente
        ENV="${{ github.event.inputs.environment || 'production' }}"
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        
        echo "üöÄ Deploy iniciado - Vers√£o: $VERSION | Ambiente: $ENV"

    - name: Testar conectividade SSH (se debug ativado)
      if: github.event.inputs.debug_ssh == 'true'
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        debug: true
        script: |
          echo "üîç Teste de conectividade SSH..."
          echo "Usu√°rio: $(whoami)"
          echo "Diret√≥rio: $(pwd)"
          echo "Sistema: $(uname -a)"
          echo "Data: $(date)"
          echo "‚úÖ SSH funcionando corretamente!"
      
    - name: Deploy para VPS
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 60m
        script: |
          set -e  # Parar em qualquer erro
          
          DOMAIN="${{ secrets.DOMAIN_NAME }}"
          VERSION="${{ steps.vars.outputs.version }}"
          ENVIRONMENT="${{ steps.vars.outputs.environment }}"
          FORCE_SSL="${{ github.event.inputs.force_ssl_setup || 'false' }}"
          
          echo "üöÄ Iniciando deploy $VERSION para $DOMAIN (ambiente: $ENVIRONMENT)..."
          
          # Configurar diret√≥rios
          mkdir -p ~/carangode ~/logs
          cd ~/carangode
          
          # Configurar reposit√≥rio
          if [ ! -d ".git" ]; then
            git init
            git remote add origin ${{ github.server_url }}/${{ github.repository }}.git
          fi
          
          git fetch origin main
          git reset --hard origin/main
          
          # Criar arquivo de vers√£o
          echo "$VERSION" > VERSION
          echo "Deploy realizado em: ${{ steps.vars.outputs.timestamp }}" >> VERSION
          echo "Commit: ${{ github.sha }}" >> VERSION
          echo "Ambiente: $ENVIRONMENT" >> VERSION
          
          # Dar permiss√µes aos scripts
          chmod +x *.sh
          
          # Instalar Node.js 20 LTS (requerido pelo React Router 7)
          if ! node --version | grep -q "v20"; then
            echo "üì¶ Instalando Node.js 20 LTS..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Instalar PM2 e serve
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2@latest
          fi
          if ! command -v serve &> /dev/null; then
            sudo npm install -g serve@latest
          fi
          
          echo "üîß Configurando backend..."
          cd backend
          
          # Criar .env do backend
          cat > .env << EOF
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}"
          ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
          PORT=5000
          NODE_ENV=$ENVIRONMENT
          FRONTEND_URL=https://$DOMAIN
          VERSION=$VERSION
          EOF
          
          # Instalar depend√™ncias e configurar banco
          npm ci --production --silent
          npx prisma generate
          npx prisma migrate deploy
          
          # Restart backend
          pm2 stop backend 2>/dev/null || true
          pm2 delete backend 2>/dev/null || true
          pm2 start src/server.js --name "backend" --max-memory-restart 150M
          
          echo "‚öõÔ∏è Configurando frontend..."
          cd ../frontend
          
          # Criar .env do frontend
          cat > .env << EOF
          VITE_API_URL=https://$DOMAIN/api
          NODE_ENV=$ENVIRONMENT
          VITE_VERSION=$VERSION
          EOF
          
          # Build e start frontend
          npm ci --silent
          npm run build
          
          pm2 stop frontend 2>/dev/null || true
          pm2 delete frontend 2>/dev/null || true
          pm2 start "npx serve -s build/client -l 3000" --name "frontend" --max-memory-restart 100M --cwd ~/carangode/frontend
          
          echo "üåê Configurando Nginx e SSL..."
          cd ..
          
          # Configurar SSL baseado na flag force_ssl_setup
          if [ "$FORCE_SSL" = "true" ] || [ ! -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "üîí Executando configura√ß√£o SSL..."
            if sudo ./setup-ssl.sh "$DOMAIN"; then
              echo "‚úÖ SSL configurado com sucesso!"
            else
              echo "‚ö†Ô∏è SSL falhou, configurando nginx apenas com HTTP..."
              # Fallback: configurar nginx sem SSL
              sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" nginx.conf
              
              # Criar vers√£o HTTP-only do nginx.conf
              sed -e '/listen 443 ssl/d' \
                  -e '/ssl_certificate/d' \
                  -e '/include .*letsencrypt/d' \
                  -e '/ssl_dhparam/d' \
                  -e 's/listen 80;/listen 80 default_server;/' \
                  -e '/return 301 https/d' \
                  nginx.conf > /tmp/nginx-http.conf
              
              sudo cp /tmp/nginx-http.conf /etc/nginx/sites-available/carangode
              sudo ln -sf /etc/nginx/sites-available/carangode /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default
              
              if sudo nginx -t && sudo systemctl restart nginx; then
                echo "‚úÖ Nginx HTTP configurado com sucesso"
              else
                echo "‚ùå Falha cr√≠tica na configura√ß√£o nginx"
                sudo nginx -t || true
                exit 1
              fi
            fi
          else
            echo "‚úÖ SSL j√° configurado, aplicando configura√ß√£o nginx..."
            # Apenas configurar nginx se SSL j√° existe
            sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" nginx.conf
            sudo cp nginx.conf /etc/nginx/sites-available/carangode
            sudo ln -sf /etc/nginx/sites-available/carangode /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx
          fi
          
          # Configurar PM2 para iniciar com sistema
          pm2 save
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.VPS_USERNAME }} --hp /home/${{ secrets.VPS_USERNAME }} 2>/dev/null || true
          
          # Aguardar servi√ßos estabilizarem
          sleep 5
          
          echo ""
          echo "üîç Verifica√ß√µes de sa√∫de..."
          
          # Teste das rotas CORRETAS
          if curl -sf http://localhost:5000/api/cursos > /dev/null; then
            echo "‚úÖ Backend (API) funcionando"
          else
            echo "‚ùå Backend n√£o responde"
            pm2 logs backend --lines 5 --nostream
          fi
          
          if curl -sf http://localhost:3000 > /dev/null; then
            echo "‚úÖ Frontend funcionando"
          else
            echo "‚ùå Frontend n√£o responde"
            pm2 logs frontend --lines 5 --nostream
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx ativo"
          else
            echo "‚ùå Nginx inativo"
            sudo systemctl status nginx --no-pager -l
          fi
          
          # SSL check
          if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "‚úÖ SSL configurado e renova√ß√£o autom√°tica ativada"
            PROTOCOL="https"
          else
            echo "‚ö†Ô∏è Usando HTTP (sem SSL)"
            PROTOCOL="http"
          fi
          
          echo ""
          echo "üéâ Deploy $VERSION conclu√≠do com sucesso!"
          echo "üåê Site: $PROTOCOL://$DOMAIN"
          echo "üîß API: $PROTOCOL://$DOMAIN/api/cursos"
          echo "üì¶ Vers√£o: $VERSION"
          echo "üåç Ambiente: $ENVIRONMENT"
          echo ""
          echo "üìä Status dos servi√ßos:"
          pm2 status
          echo ""
          echo "üîí Certificados SSL:"
          sudo certbot certificates 2>/dev/null || echo "Certbot n√£o configurado"

    - name: Criar Release Autom√°tico
      if: success() && github.event_name == 'push'  # S√≥ para push autom√°tico
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.version }}
        release_name: 'Release ${{ steps.vars.outputs.version }}'
        body: |
          üöÄ **Deploy Autom√°tico - ${{ steps.vars.outputs.version }}**
          
          **üìÖ Data:** ${{ steps.vars.outputs.timestamp }}
          **üîß Commit:** ${{ github.sha }}
          **üåç Ambiente:** ${{ steps.vars.outputs.environment }}
          **üë§ Autor:** ${{ github.actor }}
          
          **üìã Altera√ß√µes inclu√≠das:**
          ${{ github.event.head_commit.message }}
          
          **üîó Links:**
          - üåê [Site ao vivo](https://${{ secrets.DOMAIN_NAME }})
          - üîß [API](https://${{ secrets.DOMAIN_NAME }}/api/cursos)
          
          ---
          *Release criado automaticamente pelo GitHub Actions*
        draft: false
        prerelease: false

    - name: Comentar no commit (se manual)
      if: success() && github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `üöÄ **Deploy Manual Realizado**
            
            **üì¶ Vers√£o:** ${{ steps.vars.outputs.version }}
            **üåç Ambiente:** ${{ steps.vars.outputs.environment }}
            **üë§ Executado por:** @${{ github.actor }}
            **üìÖ Data:** ${{ steps.vars.outputs.timestamp }}
            
            **üîó Links:**
            - üåê [Site ao vivo](https://${{ secrets.DOMAIN_NAME }})
            - üîß [API](https://${{ secrets.DOMAIN_NAME }}/api/cursos)
            
            ‚úÖ Deploy conclu√≠do com sucesso!`
          })

    - name: Notificar status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deploy realizado com sucesso!"
          echo "üåê Site: https://${{ secrets.DOMAIN_NAME }}"
          echo "üì¶ Vers√£o: ${{ steps.vars.outputs.version }}"
        else
          echo "‚ùå Deploy falhou!"
          echo "üîç Verifique os logs acima para detalhes"
          echo ""
          echo "üí° Dicas para resolver problemas SSH:"
          echo "  1. Verifique se VPS_HOST, VPS_USERNAME est√£o corretos"
          echo "  2. Configure VPS_SSH_KEY (prefer√≠vel) ou VPS_PASSWORD"
          echo "  3. Execute com 'Debug SSH' = true para mais informa√ß√µes"
        fi 