#!/bin/bash

# Script de configura√ß√£o autom√°tica SSL para Carangode
# Configura dom√≠nio, gera certificados e ativa renova√ß√£o autom√°tica

set -e  # Parar em caso de erro

echo "üîí Configura√ß√£o Autom√°tica SSL - Carangode"
echo "=========================================="
echo ""

# Pedir dom√≠nio se n√£o fornecido como par√¢metro
DOMAIN=$1
if [ -z "$DOMAIN" ]; then
    echo "üìù Digite seu dom√≠nio (ex: meusite.com):"
    read -r DOMAIN
fi

# Validar formato do dom√≠nio
if [[ ! "$DOMAIN" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$ ]]; then
    echo "‚ùå Formato de dom√≠nio inv√°lido: $DOMAIN"
    echo "   Use apenas letras, n√∫meros, pontos e h√≠fens"
    exit 1
fi

echo "üåê Configurando dom√≠nio: $DOMAIN"
echo ""

# Verificar se nginx est√° instalado
if ! command -v nginx &> /dev/null; then
    echo "‚ùå Nginx n√£o encontrado. Instalando..."
    apt update
    apt install -y nginx
fi

# Verificar se certbot est√° instalado
if ! command -v certbot &> /dev/null; then
    echo "üîß Instalando Certbot para Let's Encrypt..."
    apt update
    apt install -y certbot python3-certbot-nginx
fi

# Limpar configura√ß√µes problem√°ticas primeiro
echo "üßπ Limpando configura√ß√µes nginx problem√°ticas..."
NGINX_CONFIG="/etc/nginx/sites-available/carangode"
NGINX_ENABLED="/etc/nginx/sites-enabled/carangode"

# Remover links e arquivos problem√°ticos
if [ -L "$NGINX_ENABLED" ]; then
    echo "üóëÔ∏è Removendo link problem√°tico..."
    rm -f "$NGINX_ENABLED"
fi

if [ -f "$NGINX_CONFIG" ]; then
    echo "üíæ Fazendo backup da configura√ß√£o anterior..."
    cp "$NGINX_CONFIG" "$NGINX_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
    echo "üóëÔ∏è Removendo configura√ß√£o problem√°tica..."
    rm -f "$NGINX_CONFIG"
fi

# Remover configura√ß√£o padr√£o se existir
if [ -L "/etc/nginx/sites-enabled/default" ]; then
    echo "üóëÔ∏è Removendo configura√ß√£o padr√£o..."
    rm -f /etc/nginx/sites-enabled/default
fi

# ETAPA 1: Configurar nginx apenas com HTTP primeiro
echo "üìã Configurando nginx temporariamente apenas com HTTP..."
cp nginx.conf "$NGINX_CONFIG"

# Substituir dom√≠nio
sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" "$NGINX_CONFIG"

# Criar vers√£o HTTP-only tempor√°ria
sed -e '/listen 443 ssl/d' \
    -e '/ssl_certificate/d' \
    -e '/include .*letsencrypt/d' \
    -e '/ssl_dhparam/d' \
    -e 's/listen 80;/listen 80 default_server;/' \
    -e '/return 301 https/d' \
    "$NGINX_CONFIG" > /tmp/nginx-http-temp.conf

cp /tmp/nginx-http-temp.conf "$NGINX_CONFIG"

# Verificar configura√ß√£o HTTP
echo "‚úÖ Validando configura√ß√£o nginx (HTTP)..."
if ! nginx -t; then
    echo "‚ùå Configura√ß√£o nginx HTTP inv√°lida!"
    cat "$NGINX_CONFIG"
    exit 1
fi

# Ativar site HTTP tempor√°rio
echo "üîó Ativando site HTTP tempor√°rio..."
ln -sf "$NGINX_CONFIG" "$NGINX_ENABLED"

# Configurar firewall
echo "üîí Configurando firewall..."
ufw allow 'Nginx Full' >/dev/null 2>&1 || true

# Reiniciar nginx com configura√ß√£o HTTP
echo "üîÑ Reiniciando nginx com HTTP..."
systemctl restart nginx

# Verificar se nginx est√° funcionando
if ! systemctl is-active --quiet nginx; then
    echo "‚ùå Nginx n√£o est√° rodando!"
    systemctl status nginx --no-pager -l || true
    exit 1
fi

echo "‚úÖ Nginx HTTP funcionando"

# Verificar se o dom√≠nio resolve para este servidor
echo "üåê Verificando DNS..."
SERVER_IP=$(curl -s ifconfig.me || curl -s icanhazip.com)
DOMAIN_IP=$(dig +short "$DOMAIN" @8.8.8.8 | tail -n1)

if [ "$SERVER_IP" != "$DOMAIN_IP" ]; then
    echo "‚ö†Ô∏è ATEN√á√ÉO: DNS pode n√£o estar configurado corretamente"
    echo "   IP do servidor: $SERVER_IP"
    echo "   IP do dom√≠nio:  $DOMAIN_IP"
    echo "   Configure o A record no seu provedor DNS"
    echo ""
    
    # Em ambiente automatizado (como GitHub Actions), continue sem perguntar
    if [ -t 0 ]; then
        echo "‚ùì Continuar mesmo assim? (y/N)"
        read -r CONTINUE
        if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
            echo "Configure o DNS primeiro e execute novamente"
            exit 1
        fi
    else
        echo "‚ö†Ô∏è Continuando automaticamente (ambiente n√£o interativo)"
    fi
fi

# ETAPA 2: Gerar certificados SSL
echo "üîê Gerando certificados SSL..."
echo "   Dom√≠nio: $DOMAIN"
echo "   www.$DOMAIN"
echo ""

# Certbot autom√°tico (n√£o interativo)
if certbot --nginx \
    --domains "$DOMAIN,www.$DOMAIN" \
    --email "admin@$DOMAIN" \
    --agree-tos \
    --no-eff-email \
    --redirect \
    --non-interactive; then
    
    echo "‚úÖ Certificados SSL gerados com sucesso!"
    
    # ETAPA 3: Aplicar configura√ß√£o completa com SSL
    echo "üîÑ Aplicando configura√ß√£o completa com SSL..."
    
    # Restaurar configura√ß√£o original com SSL
    cp nginx.conf "$NGINX_CONFIG"
    sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" "$NGINX_CONFIG"
    
    # Testar configura√ß√£o SSL
    if nginx -t; then
        systemctl reload nginx
        echo "‚úÖ Configura√ß√£o SSL aplicada com sucesso!"
    else
        echo "‚ö†Ô∏è Configura√ß√£o SSL falhou, mantendo HTTP"
    fi
    
else
    echo "‚ùå Falha ao gerar certificados SSL"
    echo "   Site funcionando em HTTP: http://$DOMAIN"
    echo "   Verifique se:"
    echo "   1. DNS est√° configurado corretamente"
    echo "   2. Firewall permite conex√µes HTTP/HTTPS"
    echo "   3. Dom√≠nio est√° acess√≠vel"
fi

# Configurar renova√ß√£o autom√°tica
echo "üîÑ Configurando renova√ß√£o autom√°tica..."

# Criar script de renova√ß√£o
tee /etc/cron.daily/certbot-renew > /dev/null << 'EOF'
#!/bin/bash
# Renova√ß√£o autom√°tica de certificados SSL

# Log file
LOG="/var/log/certbot-renew.log"

echo "$(date): Verificando renova√ß√£o de certificados" >> "$LOG"

# Tentar renovar certificados
if /usr/bin/certbot renew --quiet --nginx; then
    echo "$(date): Renova√ß√£o conclu√≠da com sucesso" >> "$LOG"
    
    # Recarregar nginx se certificados foram renovados
    if systemctl is-active --quiet nginx; then
        systemctl reload nginx
        echo "$(date): Nginx recarregado" >> "$LOG"
    fi
else
    echo "$(date): Erro na renova√ß√£o" >> "$LOG"
fi
EOF

# Dar permiss√£o de execu√ß√£o
chmod +x /etc/cron.daily/certbot-renew

# Testar renova√ß√£o autom√°tica se SSL est√° funcionando
if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    echo "üß™ Testando renova√ß√£o autom√°tica..."
    if certbot renew --dry-run --quiet; then
        echo "‚úÖ Renova√ß√£o autom√°tica configurada com sucesso!"
    else
        echo "‚ö†Ô∏è Teste de renova√ß√£o falhou, mas certificados foram gerados"
    fi
fi

# Verificar status final
echo ""
echo "üéâ Configura√ß√£o Conclu√≠da!"
echo "========================="
echo ""
echo "‚úÖ Dom√≠nio configurado: $DOMAIN"

if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    echo "‚úÖ Certificados SSL gerados"
    echo "‚úÖ Renova√ß√£o autom√°tica ativada"
    echo "‚úÖ HTTPS funcionando"
    PROTOCOL="https"
else
    echo "‚ö†Ô∏è SSL n√£o configurado - usando HTTP"
    PROTOCOL="http"
fi

echo "‚úÖ Nginx configurado e rodando"
echo ""

# Teste final
echo "üîó Testando conectividade..."
if curl -sSf "$PROTOCOL://$DOMAIN/health" >/dev/null 2>&1; then
    echo "‚úÖ Site funcionando: $PROTOCOL://$DOMAIN"
elif curl -sSf "$PROTOCOL://$DOMAIN" >/dev/null 2>&1; then
    echo "‚úÖ Site funcionando: $PROTOCOL://$DOMAIN"
else
    echo "‚ö†Ô∏è Site pode n√£o estar funcionando ainda"
    echo "   Teste: $PROTOCOL://$DOMAIN"
fi

echo ""
if [ "$PROTOCOL" = "https" ]; then
    echo "üìã Informa√ß√µes importantes:"
    echo "‚Ä¢ Certificados renovam automaticamente a cada 60 dias"
    echo "‚Ä¢ Logs da renova√ß√£o: /var/log/certbot-renew.log"  
    echo "‚Ä¢ Para for√ßar renova√ß√£o: certbot renew --force-renewal"
    echo "‚Ä¢ Para verificar status: certbot certificates"
fi

echo ""
echo "üöÄ Site online em: $PROTOCOL://$DOMAIN" 