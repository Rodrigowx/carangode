#!/bin/bash

# Script de diagn√≥stico SSL/HTTPS para erro 522 Cloudflare

echo "üîí Diagn√≥stico SSL/HTTPS - Erro 522 Cloudflare"
echo "================================================"
echo ""

# Verificar se temos o dom√≠nio definido
echo "üìù Configura√ß√£o de Dom√≠nio:"
DOMAIN_IN_NGINX=$(grep -oP 'server_name \K[^;]*' /etc/nginx/sites-available/carangode 2>/dev/null | head -1 | awk '{print $1}')
if [ -z "$DOMAIN_IN_NGINX" ] || [ "$DOMAIN_IN_NGINX" = "DOMAIN_PLACEHOLDER" ]; then
    echo "‚ùå PROBLEMA CR√çTICO: Dom√≠nio n√£o configurado no nginx!"
    echo "   - Arquivo: /etc/nginx/sites-available/carangode"
    echo "   - Ainda cont√©m DOMAIN_PLACEHOLDER"
    echo ""
    echo "üîß SOLU√á√ÉO: Substitua DOMAIN_PLACEHOLDER pelo seu dom√≠nio real"
    echo "   sudo sed -i 's/DOMAIN_PLACEHOLDER/seudominio.com/g' /etc/nginx/sites-available/carangode"
    echo ""
    DOMAIN_FOUND=false
else
    echo "‚úÖ Dom√≠nio configurado: $DOMAIN_IN_NGINX"
    DOMAIN_FOUND=true
fi
echo ""

# Verificar certificados SSL
echo "üîê Certificados SSL:"
if [ "$DOMAIN_FOUND" = true ]; then
    CERT_PATH="/etc/letsencrypt/live/$DOMAIN_IN_NGINX"
    if [ -d "$CERT_PATH" ]; then
        echo "‚úÖ Diret√≥rio de certificados existe: $CERT_PATH"
        
        if [ -f "$CERT_PATH/fullchain.pem" ] && [ -f "$CERT_PATH/privkey.pem" ]; then
            echo "‚úÖ Arquivos de certificado encontrados"
            
            # Verificar validade do certificado
            EXPIRE_DATE=$(openssl x509 -in "$CERT_PATH/fullchain.pem" -noout -enddate 2>/dev/null | cut -d= -f2)
            if [ ! -z "$EXPIRE_DATE" ]; then
                echo "‚úÖ Certificado v√°lido at√©: $EXPIRE_DATE"
                
                # Verificar se vai expirar em breve (30 dias)
                EXPIRE_TIMESTAMP=$(date -d "$EXPIRE_DATE" +%s 2>/dev/null)
                CURRENT_TIMESTAMP=$(date +%s)
                DAYS_LEFT=$(( ($EXPIRE_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))
                
                if [ $DAYS_LEFT -lt 30 ]; then
                    echo "‚ö†Ô∏è ATEN√á√ÉO: Certificado expira em $DAYS_LEFT dias"
                else
                    echo "‚úÖ Certificado v√°lido por $DAYS_LEFT dias"
                fi
            else
                echo "‚ùå Erro ao ler certificado"
            fi
        else
            echo "‚ùå Arquivos de certificado n√£o encontrados"
        fi
    else
        echo "‚ùå Certificados SSL n√£o encontrados em $CERT_PATH"
        echo "üîß Execute: sudo certbot --nginx -d $DOMAIN_IN_NGINX"
    fi
else
    echo "‚ùå N√£o √© poss√≠vel verificar certificados sem dom√≠nio configurado"
fi
echo ""

# Verificar se nginx est√° escutando nas portas corretas
echo "üîå Portas e Binddings:"
echo "HTTP (80):"
ss -tlnp | grep :80 || echo "‚ùå Nginx n√£o est√° escutando na porta 80"

echo "HTTPS (443):"
ss -tlnp | grep :443 || echo "‚ùå Nginx n√£o est√° escutando na porta 443"

echo "Backend (5000):"
ss -tlnp | grep :5000 || echo "‚ùå Backend n√£o est√° rodando na porta 5000"

echo "Frontend (3000):"
ss -tlnp | grep :3000 || echo "‚ùå Frontend n√£o est√° rodando na porta 3000"
echo ""

# Verificar configura√ß√£o nginx
echo "üåê Nginx:"
if sudo nginx -t &>/dev/null; then
    echo "‚úÖ Configura√ß√£o nginx v√°lida"
else
    echo "‚ùå PROBLEMA: Configura√ß√£o nginx inv√°lida"
    echo "Erros:"
    sudo nginx -t
fi

# Status do nginx
NGINX_STATUS=$(sudo systemctl is-active nginx 2>/dev/null)
echo "Status nginx: $NGINX_STATUS"
if [ "$NGINX_STATUS" != "active" ]; then
    echo "‚ùå Nginx n√£o est√° rodando"
    echo "üîß Execute: sudo systemctl start nginx"
fi
echo ""

# Verificar firewall UFW
echo "üîí Firewall:"
UFW_STATUS=$(sudo ufw status 2>/dev/null)
echo "$UFW_STATUS"

if echo "$UFW_STATUS" | grep -q "inactive"; then
    echo "‚ö†Ô∏è UFW inativo - isso pode estar OK se usando Cloudflare"
elif ! echo "$UFW_STATUS" | grep -q "Nginx Full\|80\|443"; then
    echo "‚ùå Portas HTTP/HTTPS n√£o liberadas no firewall"
    echo "üîß Execute: sudo ufw allow 'Nginx Full'"
fi
echo ""

# Testes de conectividade local
echo "üîó Testes de Conectividade Local:"

# Teste HTTP local
if curl -s -o /dev/null -w "%{http_code}" http://localhost > /dev/null; then
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
    echo "‚úÖ HTTP local: $HTTP_CODE"
else
    echo "‚ùå HTTP local falhou"
fi

# Teste backend direto
if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/cursos > /dev/null; then
    BACKEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/cursos)
    echo "‚úÖ Backend direto: $BACKEND_CODE"
else
    echo "‚ùå Backend n√£o responde em http://localhost:5000/api/cursos"
fi

# Teste frontend direto  
if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 > /dev/null; then
    FRONTEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
    echo "‚úÖ Frontend direto: $FRONTEND_CODE"
else
    echo "‚ùå Frontend n√£o responde em http://localhost:3000"
fi
echo ""

# Verificar logs de erro
echo "üìã Logs de Erro Recentes:"
echo "--- Nginx Error Log (√∫ltimas 10 linhas) ---"
sudo tail -10 /var/log/nginx/error.log 2>/dev/null || echo "Log n√£o encontrado"
echo ""

echo "--- PM2 Logs ---"
pm2 logs --lines 5 --nostream 2>/dev/null || echo "PM2 n√£o rodando"
echo ""

# Diagn√≥stico espec√≠fico para Cloudflare
echo "‚òÅÔ∏è Cloudflare - Causas Comuns do Erro 522:"
echo "1. ‚ùå Servidor n√£o responde na porta 443 (HTTPS)"
echo "2. ‚ùå Certificado SSL inv√°lido ou expirado"
echo "3. ‚ùå Firewall bloqueando conex√µes do Cloudflare"
echo "4. ‚ùå Nginx n√£o rodando ou configura√ß√£o incorreta"
echo "5. ‚ùå Backend/Frontend n√£o rodando"
echo ""

echo "üîß Passos para Resolver o Erro 522:"
echo "1. Verificar se seu dom√≠nio est√° correto no nginx.conf"
echo "2. Certificar que nginx est√° rodando: sudo systemctl start nginx"
echo "3. Gerar certificado SSL: sudo certbot --nginx -d seudominio.com"
echo "4. Liberar firewall: sudo ufw allow 'Nginx Full'"
echo "5. Iniciar aplica√ß√µes: ./monitor.sh restart"
echo "6. Verificar DNS no Cloudflare (A record apontando para seu IP)"
echo ""

echo "üåê Teste Manual de HTTPS:"
if [ "$DOMAIN_FOUND" = true ] && [ "$DOMAIN_IN_NGINX" != "DOMAIN_PLACEHOLDER" ]; then
    echo "Execute: curl -I https://$DOMAIN_IN_NGINX"
    echo "Esperado: HTTP/1.1 200 OK ou 301/302"
else
    echo "Configure seu dom√≠nio primeiro no nginx.conf"
fi 